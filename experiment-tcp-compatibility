#!/bin/bash

# Dependencies: tcpdump tcptrace python3 mahimahi

#trace_dir=~/traces
HZ=100 # HZ value of kernel
bin_dir=../bin
run_time=10000
output_directory=TcpCompatibility

qdisc_interface=ens3
receiver_ip=128.52.179.220 #127.0.0.1
tcp_port=5010
x_port=5011

run_time_s=$(( $run_time / 1000 ))
#ls $trace_dir/trace-*Mbps >/tmp/experiment-tcp-compatibility-traces

random_network() {
    num_tcp=$(( ( $RANDOM % 4 )  + 1 ))
    num_x=$(( ( $RANDOM % 4 )  + 1 ))
    #rnd_trace=`cat /tmp/experiment-tcp-compatibility-traces | sort -R | head -n 1`
    # Half of RTT in ms
    delay=$(( ( $RANDOM % 49 ) + 1 ))
    # In Mbits/s
    #tpt=`expr "$rnd_trace" : '.*trace-\([0-9]*\)Mbps'`
    tpt=$(( ( $RANDOM % 49) + 1 ))
    # In bytes
    bdp=`awk -v b=$tpt -v d=$delay 'BEGIN{print 2 * b * d * 1e3 / 8}'`
    # queue length = 0.5 * bdp * queue_2n_bdp
    queue_2n_bdp=$(( ( $RANDOM % 9 ) + 1 ))
    queue=`awk -v n_bdp=$queue_2n_bdp -v bdp=$bdp 'BEGIN{print bdp * n_bdp / 2}'`
    loss=0
    echo TCP $num_tcp X $num_x Delay $delay Tpt $tpt BDP $bdp Queue $queue
}

setup_qdisc() {
    # Uses the following variables: tpt (mbits/s), queue (bytes), HZ, loss
    op_netem=add
    op_tbf=add
    if tc qdisc show dev $qdisc_interface | grep -q netem; then op_netem=change; fi
    if tc qdisc show dev $qdisc_interface | grep -q tbf; then op_tbf=change; fi

    burst=`awk -v r=$tpt -v hz=$HZ 'END{print 2*r*1e6/(hz*8)}' /dev/null`
    sudo ifconfig $qdisc_interface mtu 1600 # Otherwise MTU is 100kbytes in local loopback, which can cause problems in tbf
    sudo tc qdisc $op_netem dev $qdisc_interface root handle 1:1 netem delay $(echo $delay)ms loss $loss
    sudo tc qdisc $op_tbf   dev $qdisc_interface parent 1:1 handle 10: tbf rate $(echo $tpt)mbit limit $queue burst $queue
}

if [[ ! -d $output_directory ]]; then
    mkdir $output_directory
fi

# iperf -s -p $tcp_port &
# iperf -s -p $x_port &
# $bin_dir/receiver &
# export LD_LIBRARY_PATH=$bin_dir/pcc_receiver
# $bin_dir/appserver &

for netid in {1..100}; do
    random_network
    setup_qdisc
    out_dir_net=$output_directory/net-$num_tcp-$num_x-$delay-$tpt-$queue
    if [[ -d $out_dir_net ]]; then
        echo "$out_dir already exists!"
        continue
    fi
    mkdir $out_dir_net

    sleep 5 #give some rest time
    for cong_alg in "copa" "reno" "bbr" "pcc" "cubic" "vegas"; do
        out_dir=$out_dir_net/$cong_alg
        mkdir $out_dir
        if [[ -f /tmp/long-run-qdisc.pcap ]]; then
            sudo rm /tmp/long-run-qdisc.pcap
        fi
        sudo tcpdump -w /tmp/tcp-compatibility.pcap -i $qdisc_interface -n &

        sender_pids=""
        # Run the TCPs
        for (( j=0; $j < $num_tcp; j++ )); do
            of_name=$out_dir/tcp-$j
            iperf -c $receiver_ip -p $tcp_port -t $run_time_s 1>$of_name.stdout -Z cubic 2>$of_name.stderr &
            sender_pids="$sender_pids $!"
        done

        # Run the X congestion control
        for (( j=0; $j < $num_x; j++ )); do
            of_name=$out_dir/x-$j
            if [[ $cong_alg == "copa" ]]; then
                export MIN_RTT=10000000
                $bin_dir/sender serverip=$receiver_ip traffic_params=deterministic,num_cycles=1 onduration=$run_time offduration=1 cctype=markovian delta_conf=do_ss:auto:0.5  1>$of_name.stdout 2>$of_name.stderr &
                sender_pids="$sender_pids $!"
            elif [[ $cong_alg == "cubic" ]] || [[ $cong_alg == "vegas" ]] || [[ $cong_alg == "reno" ]]; then
                iperf -c $receiver_ip -p $x_port -t $run_time_s -Z $cong_alg 1>$of_name.stdout 2>$of_name.stderr &
                sender_pids="$sender_pids $!"
            elif [[ $cong_alg == "bbr" ]]; then
                 su -c "mm-delay 0 ./run-bbr-sender \"iperf -c $receiver_ip -p $x_port -t $run_time_s -Z bbr \" ingress $ofname &" ubuntu
                 sender_pids="$sender_pids $!"
            elif [[ $cong_alg == "pcc" ]]; then
                export LD_LIBRARY_PATH=$bin_dir/pcc_sender
                $bin_dir/appclient $receiver_ip 9000 1>$of_name.stdout 2>$of_name.stderr &
                sender_pids="$sender_pids $!"
            fi
        done

        sleep $run_time_s
        echo "Finishing run"
        sudo pkill tcpdump
        sudo pkill tcpdump
        kill -9 $sender_pids
        tcptrace -lu /tmp/tcp-compatibility.pcap > $out_dir/pcap-trace
        #tcptrace -G /tmp/tcp-compatibility.pcap --output-dir $out_dir
        #exit
        sudo rm /tmp/tcp-compatibility.pcap
    done
done
